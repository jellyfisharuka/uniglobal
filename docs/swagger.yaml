basePath: /
definitions:
  handlers.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  handlers.LikeRequest:
    properties:
      message_id:
        type: integer
    type: object
  models.ChangePasswordRequest:
    properties:
      confirm_password:
        type: string
      new_password:
        minLength: 6
        type: string
      old_password:
        type: string
    required:
    - confirm_password
    - new_password
    - old_password
    type: object
  models.Chat:
    properties:
      id:
        type: integer
      messages:
        items:
          $ref: '#/definitions/models.Message'
        type: array
      userID:
        type: integer
    type: object
  models.LoginSwagger:
    properties:
      password:
        description: Пароль пользователя
        type: string
      username:
        description: Уникальное имя пользователя
        type: string
    type: object
  models.Message:
    properties:
      answer:
        type: string
      chatID:
        type: integer
      createdAt:
        type: string
      id:
        type: integer
      isLiked:
        description: liked gpt answer for user favs
        type: boolean
      prompt:
        type: string
      senderID:
        type: integer
    type: object
  models.MessageSwagger:
    properties:
      chatID:
        description: The ID of the chat
        type: integer
      prompt:
        description: The message content (input from user)
        type: string
    type: object
  models.Question:
    properties:
      question:
        type: string
    type: object
  models.Role:
    properties:
      id:
        type: integer
      name:
        description: '"admin", "user"'
        type: string
    type: object
  models.SignupSwagger:
    properties:
      city:
        type: string
      confirm_password:
        description: RoleID    int    `json:"roleID,omitempty"` // ID роли пользователя
        type: string
      email:
        type: string
      firstName:
        description: Имя пользователя
        type: string
      gender:
        type: string
      lastName:
        description: Фамилия пользователя
        type: string
      password:
        description: Пароль пользователя
        type: string
      telephone:
        description: Номер телефона пользователя
        type: string
      username:
        description: Уникальное имя пользователя
        type: string
    type: object
  models.UpdateUser:
    properties:
      city:
        type: string
      email:
        type: string
      gender:
        type: string
      photo:
        type: string
      telephone:
        type: string
      username:
        type: string
    type: object
  models.User:
    properties:
      chats:
        items:
          $ref: '#/definitions/models.Chat'
        type: array
      city:
        type: string
      confirm_password:
        type: string
      createdAt:
        type: string
      email:
        type: string
      firstName:
        type: string
      gender:
        type: string
      id:
        type: integer
      lastName:
        type: string
      password:
        type: string
      photo:
        type: string
      role:
        $ref: '#/definitions/models.Role'
      roleID:
        type: integer
      telephone:
        type: string
      updatedAt:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a sample server.
  title: UniGlobal
  version: "1.0"
paths:
  /api/generate/gpt:
    post:
      consumes:
      - application/json
      description: Generate content based on the given prompt
      parameters:
      - description: Question to get answer for
        in: body
        name: question
        required: true
        schema:
          $ref: '#/definitions/models.Question'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: GenerateContent
      tags:
      - generate
  /api/generate/motivational_letter:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Generate a motivational letter based on user data
      parameters:
      - description: Age
        in: formData
        name: age
        required: true
        type: integer
      - description: University
        in: formData
        name: university
        required: true
        type: string
      - description: Country
        in: formData
        name: country
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      - GoogleOAuth: []
      summary: Create Motivational Letter
      tags:
      - letters
  /api/generate/recommendation_letter:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Generate a basic recommendation letter based on provided user data
      parameters:
      - description: Relationship with Candidate
        in: formData
        name: relationship
        required: true
        type: string
      - description: Key Achievements of Candidate
        in: formData
        name: achievements
        required: true
        type: string
      - description: Key Qualities of Candidate
        in: formData
        name: qualities
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Create Recommendation Letter
      tags:
      - letters
  /chats:
    get:
      consumes:
      - application/json
      description: Retrieve all chats
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Chat'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - Bearer: []
      summary: Get all chats
      tags:
      - chats
    post:
      consumes:
      - application/json
      description: Create a new chat by providing the chat details (empty by default)
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Chat'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - Bearer: []
      summary: Create a new chat
      tags:
      - chats
  /chats/{chatID}/messages:
    post:
      consumes:
      - application/json
      description: Send a message to a specified chat, and generate an AI response
      parameters:
      - description: Message content
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/models.MessageSwagger'
      produces:
      - application/json
      responses:
        "201":
          description: Message sent successfully
          schema:
            $ref: '#/definitions/models.MessageSwagger'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - Bearer: []
      summary: Send a message to a chat
      tags:
      - chats
  /chats/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a chat by its ID
      parameters:
      - description: Chat ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Chat'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - Bearer: []
      summary: Get a chat by ID
      tags:
      - chats
  /download-pdf:
    get:
      description: Принимает текст и возвращает PDF-файл для скачивания
      parameters:
      - description: Текст для генерации PDF
        in: query
        name: text
        required: true
        type: string
      produces:
      - application/pdf
      responses:
        "200":
          description: OK
          schema:
            type: file
        "400":
          description: 'Ошибка: текст не передан'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'Ошибка: не удалось создать PDF'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      - GoogleOAuth: []
      summary: Скачать PDF с текстом
      tags:
      - pdf
  /favorites:
    get:
      description: Возвращает список сообщений, которые пользователь отметил как избранные
        (лайкнул)
      produces:
      - application/json
      responses:
        "200":
          description: Список избранных сообщений
          schema:
            items:
              $ref: '#/definitions/models.Message'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      - GoogleOAuth: []
      - Bearer: []
      - GoogleOAuth: []
      summary: Получить избранные ответы
      tags:
      - favorites
  /login:
    post:
      consumes:
      - application/json
      description: Logs in an existing user
      parameters:
      - description: New user information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.LoginSwagger'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Login user
      tags:
      - Auth
  /messages/like:
    put:
      consumes:
      - application/json
      description: Инвертирует статус лайка у сообщения пользователя (лайк/убрать
        лайк)
      parameters:
      - description: ID сообщения для лайка
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.LikeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Статус лайка
          schema:
            additionalProperties:
              type: boolean
            type: object
        "400":
          description: Некорректный запрос
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Сообщение не найдено
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      - GoogleOAuth: []
      - Bearer: []
      - GoogleOAuth: []
      summary: Поставить или убрать лайк у сообщения
      tags:
      - messages
  /send_checklist:
    post:
      description: Возвращает URL файла для указанного типа чек-листа и отправляет
        на почту пользователя
      parameters:
      - description: ID типа чек-листа
        in: query
        name: type_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      - GoogleOAuth: []
      summary: Получить чек-лист
      tags:
      - checklist
  /signup:
    post:
      consumes:
      - application/json
      description: Signs up a new user
      parameters:
      - description: New user information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.SignupSwagger'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Sign up user
      tags:
      - Auth
  /user/change_password:
    put:
      consumes:
      - application/json
      description: Change user password
      parameters:
      - description: Fields to update
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Changen user password
      tags:
      - users
  /user/me:
    get:
      consumes:
      - application/json
      description: Retrieve the information of the currently authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - Bearer: []
      summary: Get the authenticated user's info
      tags:
      - users
  /user/updateInfo:
    put:
      consumes:
      - application/json
      description: Update user fields like city, email, phone (optional)
      parameters:
      - description: Fields to update
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Update user fields
      tags:
      - users
  /userchats:
    get:
      consumes:
      - application/json
      description: Retrieve all chats for user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Chat'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - Bearer: []
      summary: Get all chats for user
      tags:
      - chats
securityDefinitions:
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
